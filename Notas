Scraping ----> Que es y para que sirve---> https://www.youtube.com/watch?v=2XiLA_dEteQ
La idea es recorrer el codigo HTML para sacar info de ahi.

Scraping Numbers from HTML using urllib and BeautifulSoup

----Modulo Request de urllib----

Using urllib, you can treat a web page much like a file. You simply indicate which web page you would like to retrieve and urllib handles all of the HTTP protocol and header details. Once the web page has been opened with urllib.urlopen, we can treat it like a file and read through it using a for loop. Antes de poder utilizar las funciones de un módulo, debemos importarlo a nuestro programa. Para hacer eso, utilizaremos la declaración import seguida del nombre del o los módulos que se desen importar. Por ej:

import urllib.request    #importo la libreria. Esta tiene 4 modulos, el que uso aca es el .request
Luego podemos utilizar las funciones incluídas en ambos módulos escribiendo el nombre del mismo seguido por un punto y la función deseada.

FUNCION: urllib.request.urlopen (url, data=None, otras cosas) Open the URL url, which can be either a string or a Request object. url should be a string containing a valid URL. Por ejemplo:

page=input("Enter de page: ")
fhand = urllib.request.urlopen(page)       # urlopen() es la funcion del modulo request
----BeautifulSoup de bs4----

NOTA: hay varias formas de importar modulos de una libreria --->https://blog.cloudboost.io/python-import-from-as-cheatsheet-tutorial-example-beginner-help-module-function-def-5f03b02a1dbe

from bs4 import BeautifulSoup
TAGS https://www.crummy.com/software/BeautifulSoup/bs4/doc/#making-the-soup , https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree A Tag object corresponds to an XML or HTML tag in the original document: https://www.w3schools.com/TAgs/default.asp

One common task is extracting all the URLs found within a page’s tags:

for link in soup.find_all('a'):
    print(link.get('href'))
Another common task is extracting all the text from a page:

print(soup.get_text())
DATA SERIALIZATION

Data serialization is the process of converting an object into a stream of bytes to more easily save or transmit it. Byte streams are a sequence of bytes used by programs to input and output information.Data serialization is the process of converting data objects present in complex data structures into a byte stream for storage, transfer and distribution purposes on physical devices.

Computer systems may vary in their hardware architecture, OS, addressing mechanisms. Internal binary representations of data also vary accordingly in every environment. Storing and exchanging data between such varying environments requires a platform-and-language-neutral data format that all systems understand.

-----parse XML (eXtensible Markup Language) data-----

https://www.py4e.com/html3/13-web https://docs.python.org/3/library/xml.etree.elementtree.html Basicamente, es arboles, listas de arboles e indagar por las ramas de los arboles Using an XML parser such as ElementTree has the advantage that while the XML in this example is quite simple, it turns out there are many rules regarding valid XML, and using ElementTree allows us to extract data from XML without worrying about the rules of XML syntax. Calling fromstring converts the string representation of the XML into a “tree” of XML elements. When the XML is in a tree, we have a series of methods we can call to extract portions of data from the XML string. The find function searches through the XML tree and retrieves the element that matches the specified tag.

IMPORTACION de librerias

La forma en que llamas a una funcion depende de como importaste. Si no esta bien, no corre el codigo.

from urllib.request import urlopen ---> html = urlopen(url, context=ctx).read() (aca no usa decode porque despues usa el parser de BS) import urllib.request ---> html= urllib.request.urlopen(page).read().decode()



---Parsing JavaScript Object Notation (JSON)----

https://www.json.org/json-es.html 
es un formato de representacion de datos, mas simple que XML. Recordemos que eran formatos de serializacion: Data serialization is the process of converting data objects
present in complex data structures into a byte stream for storage, transfer and distribution purposes on physical devices. JSON is quickly becoming the format of choice 
for nearly all data exchange between applications because of its relative simplicity compared to XML.
https://devopedia.org/data-serialization#:~:text=XML%20%2C%20JSON%20%2C%20BSON%2C%20YAML,commonly%20used%20data%20serialization%20formats.


Parsing JSON
We construct our JSON by nesting dictionaries and lists as needed. In this example, we represent a list of users where each user is a set of key-value pairs (i.e., a 
dictionary). So we have a list of dictionaries. In the program jason_1.py , we use the built-in json library to parse the JSON and read through the data. 
Compare this closely to the equivalent XML data and code above. The JSON has less detail, so we must know in advance that we are getting a list and that the list is of 
users and each user is a set of key-value pairs. The JSON is more succinct (an advantage) but also is less self-describing (a disadvantage).

json.loads() me devuelve a Python list which we traverse with a for loop, and each item within that list is a Python dictionary. Once the JSON has been parsed, we can
use the Python index operator to extract the various bits of data for each user. We don’t have to use the JSON library to dig through the parsed JSON, since the returned
data is simply native Python structures.

----------------------------------------------------
JSON comunmnete usado con las APIs. ¿Qué es una API?
Las API  “interfaz de programación de aplicaciones” son mecanismos que permiten a dos componentes de software comunicarse entre sí mediante un conjunto de definiciones y
protocolos.La interfaz puede considerarse como un contrato de servicio entre dos aplicaciones. Este contrato define cómo se comunican entre sí mediante solicitudes y
respuestas. La documentación de su API contiene información sobre cómo los desarrolladores deben estructurar esas solicitudes y respuestas.La arquitectura de las API 
suele explicarse en términos de cliente y servidor. La aplicación que envía la solicitud se llama cliente, y la que envía la respuesta se llama servidor.

Por ejemplo, el sistema de software del instituto de meteorología contiene datos meteorológicos diarios. La aplicación meteorológica de su teléfono “habla” con este
sistema a través de las API y le muestra las actualizaciones meteorológicas diarias en su teléfono. la base de datos meteorológicos del instituto es el servidor y la 
aplicación móvil es el cliente.

When we begin to build our programs where the functionality of our program includes access to services provided by other programs, we call the approach a
Service-oriented architecture (SOA).We see many examples of SOA when we use the web. We can go to a single web site and book air travel, hotels, and automobiles all from 
a single site. The data for hotels is not stored on the airline computers. Instead, the airline computers contact the services on the hotel computers and retrieve the
hotel data and present it to the user. When the user agrees to make a hotel reservation using the airline site, the airline site uses another web service on the hotel
systems to actually make the reservation. And when it comes time to charge your credit card for the whole transaction, still other computers become involved in the
process.

para el codigo ----> https://docs.python.org/3/library/json.html



RECORDATORIO.
Diccionarios de python:

------------------------------------------------
 thisdict =	{
   "brand": "Ford",
   "model": "Mustang",
   "year": 1964
 }
 print(thisdict) 
 ----------------------------------------------
 
 este codigo me devuelve: 
 
 -----------------------------------------------------------
 {'brand': 'Ford', 'model': 'Mustang', 'year': 1964}
 ------------------------------------------------

a esto le llama "key-value pairs".

Para imprimir items de diccionarios, en python, pongo diccionario["nombre de lo que quiero"] . Por ejemplo:
Print the "brand" value of the dictionary:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict["brand"]) ------->Ford
